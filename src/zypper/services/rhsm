#!/usr/bin/env python

#
# Copyright (c) 2017 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import os
import sys

from subscription_manager import injection as inj
from subscription_manager.repofile import ZypperRepoFile
from subscription_manager.repolib import RepoActionInvoker
from subscription_manager.entcertlib import EntCertActionInvoker
from subscription_manager.certlib import Locker
from subscription_manager.injectioninit import init_dep_injection
from rhsm import connection, logutil
from rhsm import config

from six.moves.configparser import ConfigParser

if sys.version_info.major < 3:
    reload(sys)
    sys.setdefaultencoding('UTF8')

c_rehash = '/usr/bin/c_rehash'

expired_warning = \
"""
*** WARNING ***
The subscription for following product(s) has expired:
%s
You no longer have access to the repositories that provide these products.  It is important that you apply an active subscription in order to resume access to security and other critical updates. If you don't have other active subscriptions, you can renew the expired subscription.  """

not_registered_warning = \
"This system is not registered with an entitlement server. You can use subscription-manager to register."

no_subs_warning = \
"This system is registered with an entitlement server, but is not receiving updates. You can use subscription-manager to assign subscriptions."

no_subs_container_warning = \
"This system is not receiving updates. You can use subscription-manager on the host to register and assign subscriptions."


# If running from the zypper plugin, we want to avoid blocking
# zypper forever on locks created by other rhsm processes. We try
# to acquire the lock before potentially updating redhat.repo, but
# if we can't, the plugin will fail back to not updating it.
# So this class provides a Locker uses the default ACTION_LOCK,
# but if it would have to wait for it, it decides to do nothing
# instead.
class RepoLocker(Locker):
    def run(self, action):
        # lock.acquire will return False if it would block
        # NOTE: acquire can return None, True, or False
        #       with different meanings.
        nonblocking = self.lock.acquire(blocking=False)
        if nonblocking is False:
            # Could try to grab the pid for the log message, but it's a bit of a race.
            sys.stderr.write("Another process has the cert lock. We will not attempt to update certs or repos.")
            sys.stderr.write("\n")
            return 0
        try:
            return action()
        finally:
            self.lock.release()


class ZypperService(object):

    ZYPP_RHSM_PLUGIN_CONFIG_FILE = '/etc/rhsm/zypper.conf'

    def __init__(self):
        logutil.init_logger()
        init_dep_injection()
        self.is_root = os.getuid() == 0
        self.full_refresh_on_yum = None
        self.ca_cert_dir = None
        self.gpgcheck = False
        self.autorefresh = False
        self.plugin_enabled = True

    def read_rhsm_conf(self):
        """
        Read rhsm configuration file
        :return: None
        """
        cfg = config.get_config_parser()
        self.full_refresh_on_yum = bool(cfg.get_int('rhsm', 'full_refresh_on_yum'))
        self.ca_cert_dir = cfg.get('rhsm', 'ca_cert_dir')

    def read_zypp_conf(self):
        """
        Read configuration file specific for zypper
        :return: None
        """
        zypp_cfg = ConfigParser()
        zypp_cfg.read(self.ZYPP_RHSM_PLUGIN_CONFIG_FILE)
        if zypp_cfg.has_option('rhsm-plugin', 'enabled'):
            self.plugin_enabled = zypp_cfg.getboolean('rhsm-plugin', 'enabled')

    def main(self):
        """
        Main plugin method
        :return:
        """
        # the zypper plugin expects the repo data to be printed.
        # The printed output should not include sub-man warnings etc.
        sendback = sys.stdout
        sys.stdout = sys.stderr

        try:
            self.update()
        except connection.RestlibException as e:
            sys.stderr.write('Error while syncing: %s; repos will not be updated.' % e.msg)
            sys.stderr.write('\n')
        self.warn_or_give_usage_message()
        self.warn_expired()

        # Switch back to stdout before printing the repo
        sys.stdout = sendback
        self.print_zypper_repos()

    def update(self):
        """
        Update entitlement certificates
        """
        if not self.is_root:
            sys.stderr.write('Not root, Subscription Management repositories not updated')
            sys.stderr.write("\n")
            return
        sys.stderr.write('Updating Subscription Management repositories.')
        sys.stderr.write("\n")

        # XXX: Importing inline as you must be root to read the config file

        from subscription_manager.identity import ConsumerIdentity

        cert_file = ConsumerIdentity.certpath()
        key_file = ConsumerIdentity.keypath()

        connection.UEPConnection(cert_file=cert_file, key_file=key_file)
        cache_only = not self.full_refresh_on_yum

        if not cache_only and not config.in_container():
            cert_action_invoker = EntCertActionInvoker(locker=RepoLocker())
            cert_action_invoker.update()

        repo_action_invoker = RepoActionInvoker(cache_only=cache_only, locker=RepoLocker())
        repo_action_invoker.update()

        # Rehash CA-certificates since zypper accepts only capath
        if os.path.isfile(c_rehash):
            os.system(c_rehash + ' ' + self.ca_cert_dir + ' >/dev/null 2>&1')
        else:
            sys.stderr.write("WARNING: c_rehash could not be found!\n")

    @staticmethod
    def warn_expired():
        """
        Display warning for expired entitlements
        """
        ent_dir = inj.require(inj.ENT_DIR)
        products = set()
        for cert in ent_dir.list_expired():
            for p in cert.products:
                m = '  - %s' % p.name
                products.add(m)
        if products:
            msg = expired_warning % '\n'.join(sorted(products))
            sys.stderr.write(msg)
            sys.stderr.write("\n")

    def warn_or_give_usage_message(self):
        """
        Either output a warning, or a usage message
        """
        msg = ""
        if not self.is_root:
            return
        try:
            identity = inj.require(inj.IDENTITY)
            ent_dir = inj.require(inj.ENT_DIR)
            # Don't warn people to register if we see entitelements, but no identity:
            if not identity.is_valid() and len(ent_dir.list_valid()) == 0:
                msg = not_registered_warning
            elif len(ent_dir.list_valid()) == 0:
                msg = no_subs_warning
            if config.in_container() and len(ent_dir.list_valid()) == 0:
                msg = no_subs_container_warning

        finally:
            if msg:
                sys.stderr.write(msg)
                sys.stderr.write("\n")

    @staticmethod
    def print_zypper_repos():
        try:
            repo_file = ZypperRepoFile()
            with open(repo_file.path) as repo:
                print(repo.read())
        except (OSError, IOError):
            pass


if __name__ == '__main__':
    if 'ZYPP_RHSM_PLUGIN_DISABLE' in os.environ:
        sys.stderr.write('ZYPP_RHSM_PLUGIN_DISABLE environment variable is set - plugin disabled')
        sys.stderr.write('\n')
        sys.exit(0)

    service = ZypperService()
    service.read_rhsm_conf()
    service.read_zypp_conf()

    if service.plugin_enabled is False:
        sys.stderr.write('plugin disabled in configuration file: %s' % service.ZYPP_RHSM_PLUGIN_CONFIG_FILE)
        sys.stderr.write('\n')
        sys.exit(0)
    else:
        sys.stderr.write('plugin enabled in configuration file: %s' % service.ZYPP_RHSM_PLUGIN_CONFIG_FILE)
        sys.stderr.write('\n')

    service.main()

    # suppress python-dmidecode warnings
    # TODO do this elsewhere?
    try:
        import dmidecode
        dmidecode.clear_warnings()
    except ImportError:
        pass
